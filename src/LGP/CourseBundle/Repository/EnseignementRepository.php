<?php

namespace LGP\CourseBundle\Repository;

/**
 * EnseignementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EnseignementRepository extends \Doctrine\ORM\EntityRepository
{
     /**
     * 
     * @param type $cours
     * @param type $page
     * @param type $max
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws InvalidArgumentException
     */
    public function getProfsByCours($cours, $page = 1, $max = 10) {
        if (!is_numeric($max)) {
            throw new InvalidArgumentException('Le nombre max par page est incorrect (valeur : ' . $max . ').');
        }

        $query = $this->_em->createQuery("SELECT DISTINCT e, p FROM LGPCourseBundle:Enseignement e JOIN e.prof p WHERE e.cours = :cours GROUP BY p.id");
        $query->setParameter('cours', $cours)
                ->setFirstResult(($page - 1) * $max)
                ->setMaxResults($max);
        $paginator = new Paginator($query);
        return $paginator;
    }

    /**
     * 
     * @param type $cours
     * @param type $ville
     * @param type $page
     * @param type $max
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws InvalidArgumentException
     */
    public function getProfsByCoursAndCity($cours, $ville, $page = 1, $max = 10) {
        if (!is_numeric($max)) {
            throw new InvalidArgumentException('Le nombre max par page est incorrect (valeur : ' . $max . ').');
        }

        $query = $this->_em->createQuery("SELECT DISTINCT e, p FROM LGPCourseBundle:Enseignement e JOIN e.prof p WHERE e.cours = :cours AND p.ville = :ville GROUP BY p.id");
        $query->setParameter('cours', $cours)
                ->setParameter('ville', $ville)
                ->setFirstResult(($page - 1) * $max)
                ->setMaxResults($max);
        $paginator = new Paginator($query);
        return $paginator;
    }

    /**
     * 
     * @param type $ville
     * @param type $page
     * @param type $max
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws InvalidArgumentException
     */
    public function getProfsByCity($ville, $page = 1, $max = 10) {
        if (!is_numeric($max)) {
            throw new InvalidArgumentException('Le nombre max par page est incorrect (valeur : ' . $max . ').');
        }

        $query = $this->_em->createQuery("SELECT DISTINCT e, p FROM LGPCourseBundle:Enseignement e JOIN e.prof p WHERE p.ville = :ville GROUP BY p.id");
        $query->setParameter('ville', $ville)
                ->setFirstResult(($page - 1) * $max)
                ->setMaxResults($max);
        $paginator = new Paginator($query);
        return $paginator;
    }

    /**
     * 
     * @param type $prof
     * @return type
     */
    public function getCoursByProf($prof) {
        $query = $this->_em->createQuery("SELECT DISTINCT e, c FROM LGPCourseBundle:Enseignement e JOIN e.cours c WHERE e.prof = :prof GROUP BY c.id");

        $query->setParameter('prof', $prof);
//        $query->setMaxResults(2);

        return $query->getResult();
    }

    public function getAllProfsEnseignants($page = 1, $max = 10) {
        if (!is_numeric($max)) {
            throw new InvalidArgumentException('Le nombre max par page est incorrect (valeur : ' . $max . ').');
        }

        $query = $this->_em->createQuery("SELECT DISTINCT e, p FROM LGPCourseBundle:Enseignement e JOIN e.prof p GROUP BY p.id");
        $query->setFirstResult(($page - 1) * $max)
                ->setMaxResults($max);
        $paginator = new Paginator($query);
        return $paginator;
    }

}
